
subroutine smoother(iphase, &
                    NSPEC_AB,NGLOB_AB,AX,  &
                    xix,xiy,xiz,etax,etay,etaz,gammax,gammay,gammaz, &
                    hprime_xx,hprime_yy,hprime_zz, &
                    hprimewgll_xx,hprimewgll_yy,hprimewgll_zz,&
                    wgllwgll_xy,wgllwgll_xz,wgllwgll_yz, &
                    kappastore,mustore,jacobian,ibool, &
                    deltat, &
                    SIMULATION_TYPE,&
                    NSPEC_BOUN,&
                    num_phase_ispec_elastic,nspec_inner_elastic,nspec_outer_elastic, &
                    phase_ispec_inner_elastic)

  use constants, only: CUSTOM_REAL,NGLLX,NGLLY,NGLLZ,NDIM,ONE_THIRD,FOUR_THIRDS,PI  !IMAIN WAS ADDED BY Kangchen

  use fault_solver_dynamic, only : Kelvin_Voigt_eta!, KV_direction
  use specfem_par, only : PI,FULL_ATTENUATION_SOLID, xigll, yigll, zigll, ystore
  use specfem_par_elastic, only : rmassx ,rmassy ,rmassz

  implicit none

  integer :: NSPEC_AB,NGLOB_AB

! displacement, velocity and acceleration
  real(kind=CUSTOM_REAL), dimension(NDIM,NGLOB_AB) :: AX,delta_accel

! time step
  real(kind=CUSTOM_REAL) :: deltat

! arrays with mesh parameters per slice
  integer, dimension(NGLLX,NGLLY,NGLLZ,NSPEC_AB) :: ibool
  real(kind=CUSTOM_REAL), dimension(NGLLX,NGLLY,NGLLZ,NSPEC_AB) :: &
        xix,xiy,xiz,etax,etay,etaz,gammax,gammay,gammaz
  real(kind=CUSTOM_REAL), dimension(NGLLX,NGLLY,NGLLZ,NSPEC_AB) :: &
        kappastore,mustore,jacobian

! array with derivatives of Lagrange polynomials and precalculated products
  real(kind=CUSTOM_REAL), dimension(NGLLX,NGLLX) :: hprime_xx,hprimewgll_xx
  real(kind=CUSTOM_REAL), dimension(NGLLY,NGLLY) :: hprime_yy,hprimewgll_yy
  real(kind=CUSTOM_REAL), dimension(NGLLZ,NGLLZ) :: hprime_zz,hprimewgll_zz
  real(kind=CUSTOM_REAL), dimension(NGLLX,NGLLY) :: wgllwgll_xy
  real(kind=CUSTOM_REAL), dimension(NGLLX,NGLLZ) :: wgllwgll_xz
  real(kind=CUSTOM_REAL), dimension(NGLLY,NGLLZ) :: wgllwgll_yz

! memory variables and standard linear solids for attenuation


! anisotropy
  integer :: iphase
  integer :: num_phase_ispec_elastic,nspec_inner_elastic,nspec_outer_elastic
  integer, dimension(num_phase_ispec_elastic,2) :: phase_ispec_inner_elastic

! adjoint simulations
  integer :: SIMULATION_TYPE
  integer :: NSPEC_BOUN

  ! moho kernel


! local parameters
  integer :: ispec,iglob,ispec_p,num_elements
  integer :: i,j,k,l,ia

  real(kind=CUSTOM_REAL) :: xixl,xiyl,xizl,etaxl,etayl,etazl,gammaxl,gammayl,gammazl,jacobianl
  real(kind=CUSTOM_REAL) :: duxdxl,duxdyl,duxdzl,duydxl,duydyl,duydzl,duzdxl,duzdyl,duzdzl

  ! local anisotropy parameters


  ! local attenuation parameters


 ! local C-PML absorbing boundary conditions parameters

!  write(*,*) 'entering compute forces viscoelastic noDev'
  ! choses inner/outer elements
  if( iphase == 1 ) then
    num_elements = nspec_outer_elastic
  else
    num_elements = nspec_inner_elastic
  endif
!  WRITE(*,*) num_elements
!  write(*,*) X(1,3)
  do ispec_p = 1,num_elements
       do l=1,3
          do k=1,NGLLZ
            do j=1,NGLLY
              do i=1,NGLLX
                      call eval_shape3D_single(myrank,shape3D,xil,etal,gammal,NGNOD)

        ! interpolates source locations
        xmesh = 0.0
        ymesh = 0.0
        zmesh = 0.0
        do ia=1,NGNOD
          xmesh = xmesh + shape3D(ia)*xelm(ia)
          ymesh = ymesh + shape3D(ia)*yelm(ia)
          zmesh = zmesh + shape3D(ia)*zelm(ia)
        enddo

                                      
            enddo
          enddo
        enddo
     enddo
  enddo
end subroutine smoother

